{"version":3,"sources":["components/Timer.jsx","App.js","serviceWorker.js","index.js"],"names":["Timer","startTimer","state","isStartAlarm","inputHourErr","inputMinuteErr","inputSecondErr","alert","timerState","handleInterval","h","parseInt","hour","m","minute","s","second","interval","setInterval","inputHour","inputMinute","inputSecond","stopTimer","playMusic","setState","toString","clearInterval","document","getElementById","pause","resetTimer","getTime","e","type","console","log","play","className","id","placeholder","aria-label","aria-describedby","value","this","onChange","target","onClick","controls","src","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7be20a05.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Timer extends Component {\r\n  constructor() {\r\n    super()\r\n    this.interval = null;\r\n    this.state = {\r\n      hour: '00',\r\n      minute: '00',\r\n      second: '00',\r\n      timerState: 'clear',\r\n      inputHour: 0,\r\n      inputMinute: 0,\r\n      inputSecond: 0,\r\n      inputHourErr: false,\r\n      inputMinuteErr: false,\r\n      inputSecondErr: false,\r\n      isStartAlarm: false\r\n    }\r\n  }\r\n\r\n  startTimer = () => {\r\n    if (!this.state.isStartAlarm || (this.state.inputHourErr || this.state.inputMinuteErr || this.state.inputSecondErr)) {\r\n      alert('Please set your timer first.')\r\n    }\r\n    else {\r\n      if (this.state.timerState === 'clear') {\r\n        let h = 0;\r\n        let m = 0;\r\n        let s = 0;\r\n        this.handleInterval(h, m, s);\r\n      }\r\n      else if (this.state.timerState === 'stop') {\r\n        let h = parseInt(this.state.hour);\r\n        let m = parseInt(this.state.minute);\r\n        let s = parseInt(this.state.second);\r\n        this.handleInterval(h, m, s);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleInterval = (h, m, s) => {\r\n    this.interval = setInterval(() => {\r\n      s++;\r\n      if (s > 59) {\r\n        s = 0;\r\n        m++;\r\n      }\r\n      if (m > 59) {\r\n        m = 0;\r\n        h++;\r\n      }\r\n      let setTime = `${parseInt(this.state.inputHour) > 9 ? this.state.inputHour : '0' + this.state.inputHour}-${parseInt(this.state.inputMinute) > 9 ? this.state.inputMinute : '0' + this.state.inputMinute}-${parseInt(this.state.inputSecond) > 9 ? this.state.inputSecond : '0' + this.state.inputSecond}`;\r\n      let currentTime = `${this.state.hour}-${this.state.minute}-${this.state.second}`;\r\n      if (setTime === currentTime) {\r\n        this.stopTimer();\r\n        this.playMusic();\r\n      }\r\n      else {\r\n        this.setState({\r\n          ...this.state,\r\n          hour: h > 9 ? h.toString() : `0${h}`,\r\n          minute: m > 9 ? m.toString() : `0${m}`,\r\n          second: s > 9 ? s.toString() : `0${s}`,\r\n          timerState: \"working\"\r\n        })\r\n      }\r\n    }, 5);\r\n  }\r\n\r\n  stopTimer = () => {\r\n    clearInterval(this.interval);\r\n    document.getElementById('music').pause();\r\n    this.setState({ ...this.state, timerState: 'stop' })\r\n  }\r\n\r\n  resetTimer = () => {\r\n    clearInterval(this.interval);\r\n    document.getElementById('music').pause();\r\n    this.setState({\r\n      hour: '00',\r\n      minute: '00',\r\n      second: '00',\r\n      timerState: 'clear',\r\n      inputHour: 0,\r\n      inputHourErr: false,\r\n      inputMinuteErr: false,\r\n      inputSecondErr: false,\r\n      inputMinute: 0,\r\n      inputSecond: 0,\r\n      isStartAlarm: false,\r\n\r\n    })\r\n  }\r\n\r\n  getTime = (e, type) => {\r\n    if (!e) {\r\n      e = 0;\r\n    }\r\n    e = parseInt(e);\r\n    switch (type) {\r\n      case 'hour':\r\n        this.setState({ ...this.state, inputHour: e, isStartAlarm: true, inputHourErr: (e < 0 || e > 59) });\r\n        break;\r\n      case 'minute':\r\n        this.setState({ ...this.state, inputMinute: e, isStartAlarm: true, inputMinuteErr: (e < 0 || e > 59) });\r\n        break;\r\n      case 'second':\r\n        this.setState({ ...this.state, inputSecond: e, isStartAlarm: true, inputSecondErr: (e < 0 || e > 59) });\r\n        break;\r\n      default:\r\n        console.log('setting time')\r\n    }\r\n  }\r\n\r\n  playMusic = () => {\r\n    document.getElementById('music').play();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='container mt-5'>\r\n        <h3>Wake me up after: </h3>\r\n\r\n        <div className=\"input-group mb-3\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\" id=\"basic-addon1\">Hour:</span>\r\n          </div>\r\n          <input type=\"text\" className=\"form-control\" placeholder=\"Enter Hours\" aria-label=\"Hours\" aria-describedby=\"basic-addon1\"\r\n            value={this.state.inputHour} onChange={(e) => { this.getTime(e.target.value, 'hour') }} />\r\n          {this.state.inputHourErr && <small className='errMsg'>Enter integer greater than 0 and less than 60</small>}\r\n        </div>\r\n\r\n        <div className=\"input-group mb-3\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\" id=\"basic-addon1\">Mins:</span>\r\n          </div>\r\n          <input type=\"text\" value={this.state.inputMinute} className=\"form-control\" placeholder=\"Enter Minute\" aria-label=\"Hours\" aria-describedby=\"basic-addon1\"\r\n            onChange={(e) => { this.getTime(e.target.value, 'minute') }} />\r\n          {this.state.inputMinuteErr && <small className='errMsg'>Enter integer greater than 0 and less than 60</small>}\r\n        </div>\r\n\r\n        <div className=\"input-group mb-3\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\" id=\"basic-addon1\">Secs:</span>\r\n          </div>\r\n          <input type=\"text\" className=\"form-control\" placeholder=\"Enter Seconds\" aria-label=\"Hours\" aria-describedby=\"basic-addon1\"\r\n            value={this.state.inputSecond} onChange={(e) => { this.getTime(e.target.value, 'second') }} />\r\n          {this.state.inputSecondErr && <small className='errMsg'>Enter integer greater than 0 and less than 60</small>}\r\n        </div>\r\n\r\n\r\n        <div className='timer-display'>\r\n          <h3>My Timer</h3>\r\n          <div className='timer-text'>\r\n            <span className='text-success'>{this.state.hour}:</span>\r\n            <span className='text-success'>{this.state.minute}:</span>\r\n            <span className='text-success'>{this.state.second}</span>\r\n          </div>\r\n          <div>\r\n            <button className={`btn m-2 ${!this.state.inputHourErr && !this.state.inputMinuteErr && !this.state.inputSecondErr ? 'btn-primary' : 'disabled'}`}\r\n              onClick={() => this.startTimer()}>\r\n              Start Timer\r\n            </button>\r\n            <button className='btn btn-danger m-2' onClick={() => this.stopTimer()}>Stop Timer</button>\r\n            <button className='btn btn-warning m-2' onClick={() => this.resetTimer()}>Reset Timer</button>\r\n          </div>\r\n        </div>\r\n        <audio controls id=\"music\" onClick={() => { this.playMusic() }} className='alarm'>\r\n          <source src=\"analog-watch-alarm_daniel-simion.mp3\" type=\"audio/mpeg\" />\r\n        </audio>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Timer from './components/Timer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}